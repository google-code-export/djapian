#summary The different components of Djapian

= Foreword =

To better understand how Djapian works, it is suggested to read how Xapian itself works first. You can look at [http://www.xapian.org/docs/ Xapian's documentation], especially at
the [http://www.xapian.org/docs/quickstart.html quickstart], the [http://www.xapian.org/docs/glossary.html glossary] and the [http://www.xapian.org/docs/overview.html overview].

= Djapian's architecture =

Djapian is a program divided in three parts :
 * The Djapian backend, which is used to describe the index to create and to search in this index;
 * The Djapian Django application, which describe model used to monitor the changes on the model to index;
 * The run_djapian.py daemon, used to monitor the changes on Django's database and to update the index accordingly.

== The backend ==
The backend is made of modules wrapping the Xapian API. It contains the XapianIndexer class which is used to create the search index. 

== The Django application ==
The Django application contains a model called Change. An entry in the change table is created each time the objects to index changes.

== The daemon ==

The daemon monitors the table djapian_change (defined in the models.py file of Djapian) at every 10 seconds (configurable) and update the index when an entry is found in the table.

To invoke the deamon, suppose you have a Django project called my_project installed in the /usr/share/my_project directory of your Web server. This is how could be invoked `index` process:

{{{
cd /usr/share/my_project
./manage.py index
}}}

Replace "/usr/share" with the parent directory containing your Django project and "my_project" with the name of the directory that contains your project.

The `--no-fork` option will run the daemon in foreground, and `--verbose` will print execution messages.

To consult the program's help, invoke the program with `-h`.