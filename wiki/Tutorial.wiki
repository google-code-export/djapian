#summary Tutorial with example application creation and applying Djapian
#labels Deprecated

= Introduction

Djapian provides simple way to apply full-text search to your exist applications and new ones. It has django-inspired style of API with flexible customizations of indexation and searching.

Let's go step-by-step through application creation process and discover Djapian basics.

= Sample application

Assume that we what to create another one bog application. It will have some basic entities such as post, post category and comments. Represent each of this entities with its own Django models:

{{{
class Category(models.Model):
    name = models.CharField(max_length=255)
    
    def __unicode__(self):
        return self.name

class Post(models.Model):
    title = models.CharField(max_length=255)
    author = models.CharField(max_length=255)
    category = models.ForeignKey(Category)
    created_on = models.DateTimeField(default=datetime.now)
    text = models.TextField()
    
    def headline(self):
        return "%s - %s" % (self.author, self.title)

    def __unicode__(self):
        return self.title
    
class Comment(models.Model):
    post = models.ForeignKey(Post)
    author = models.CharField(max_length=255)
    text = models.TextField()
}}}

And as every well crafted blog we want to add flexible search mechanism. For this purpose we will use Djapian.

= Creating indexer

First step is to describe how will your search indexes represent blog models. For that we have to write some classes derived from `djapian.Indexer` with index definitions and that ad it to global or our custom _index space_.  

Prior to all we create index for `Category` model
{{{
from djapian import space, Indexer, CompositeIndexer

space.add_index(Category)
}}}

`space` is the global Djapian index space. Index space - the set of Djapian indexes that stores in given file system directory. Default space stores into `DJAPIAN_DATABASE_PATH` path.

As you can see we don't provide explicit Indexer definition for Category model. Because of it simplicity we can register it with default generated indexer.

For post and comments we declare custom indexers:

{{{
class PostIndexer(Indexer):
    fields = ['text']
    tags = [
        ('title', 'title'),
    ]
    
space.add_index(Post, PostIndexer)

class CommentIndexer(Indexer):
   fields = ['text']
   tags = [
       ('post', 'post'),
       ('author', 'author'),
       
   ]

space.add_index(Comment, CommentIndexer)

blog_indexer = CompositeIndexer(Category.indexer, Post.indexer, Comment.indexer)
}}}

= Initial data and index check

= Writing search view

{{{
MODEL_CHOICES = [
    ('post', Post),
    ('comment', Comment),
]

class SearchForm(forms.Form):
    query = forms.CharField(required=True)
    model = forms.ChoiceField(choices=MODEL_CHOICES, required=False)
    category = forms.ModelChoiceField(queryset=Category.obejcts.all(), required=False)

    def do_seach(self):
        assert(self.is_valid())
        
        query = self.cleaned_data['query']
        model = self.cleaned_data['model']
        category = self.cleaned_data['category']
        
        if not model:
            indexer = blog_indxer
        else:
            indexer = model.indexer
            
        results = indexer.search(query).prefetch()
        
        if category and model in (Post, Comment):
            results = results.filter(category=category)
        
        return results
}}}

{{{
def search(request):
    results = []
    
    if request.GET:
        form = SearchForm(request.GET)
        if form.is_valid():
            results = form.do_search()
    else:
        form = SearchForm()
        
    return render_to_response('search.html', {'results': results, 'form': form})
           
}}}

= Search results template

{{{
<form action='./' method='GET'>
    {{ form.as_p }}
    <p><input type="submit" value="Search!"/></p>
</form>

{% if results %}
  <h2>Search results:</h2>
  <ol>
    {% for hit in results %}
      <li>{{ hit.instance }}- {{ hit.percent }} math</li>
    {% endfor %}
  </ol>
{% endif %}

}}}

= Adding pagination

